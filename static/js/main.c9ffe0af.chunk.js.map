{"version":3,"sources":["axios.js","Row.js","requests.js","Banner.js","Nav.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","mixed_rate_movies","data","results","all_rate_request","filter","movie","adult","fetchData","console","table","className","map","onClick","movieTrailer","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","log","handleClick","src","poster_path","backdrop_path","alt","id","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","setMovie","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","original_name","overview","substr","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c9ffe0af.chunk.js","sourcesContent":["import axios from \"axios\";\n\n// base url to make requests to the movie database\nconst instance = axios.create({\n  baseURL: \"https://api.themoviedb.org/3\",\n});\n\n//instance.get('/foo-bar');\n//https://api.themoviedb.org/3/foo-bar\n//요렇게 나중에 instance.get('주소') 쓰면 baseURL뒤에 알아서 붙는다.\n\nexport default instance;\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"./axios\";\nimport \"./Row.css\";\nimport YouTube from \"react-youtube\";\nimport movieTrailer from \"movie-trailer\";\n\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\n\nfunction Row({ title, fetchUrl, isLargeRow }) {\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\n\n  // A snippet of code which runs based on a specific condition/varaible\n  useEffect(() => {\n    // if [], run once when the row loads, and dont run again\n\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      //App.js의 fetchUrl\n      // ex) https://api.themoviedb.org/3/discover/tv?api_key=${API_KEY}&with_networks=213\n      const mixed_rate_movies = request.data.results;\n\n      const all_rate_request = mixed_rate_movies.filter(function (movie) {\n        return movie.adult === false;\n      });\n\n      setMovies(all_rate_request);\n      return request;\n    }\n    fetchData();\n  }, [fetchUrl]);\n  // [fetchUrl]은 useEffect에게 block 밖에 있는 variable를 쓰고있다고 알려주는것\n  // 여기서 Url은 계속 바뀌니까 바뀔 때 마다 알려주는건가?\n\n  console.table(movies);\n\n  const opts = {\n    height: \"390\",\n    width: \"100%\",\n    playerVars: {\n      // https://developers.google.com/youtube/player_parameters\n      autoplay: 1,\n    },\n  };\n\n  const handleClick = (movie) => {\n    if (trailerUrl) {\n      setTrailerUrl(\"\");\n    } else {\n      movieTrailer(movie?.name || \"\")\n        .then((url) => {\n          // https://www.youtube.com/watch?v=XtMThy8QKqU\n          // ?뒤에 부분 pass해서 어떻게 한다는 듯. XtMThy8QKqU 이 부분은 video ID\n          // https://www.youtube.com/watch?v=XtMThy8QKqU&banana=5\n          // urlParams.get('banana'); 하면 5라는 value를 줌. 고로 'v' 하면 video ID 부분 반환\n          const urlParams = new URLSearchParams(new URL(url).search);\n          setTrailerUrl(urlParams.get(\"v\"));\n        })\n        .catch((error) => console.log(error)); //맞는 영상 없으면 error 송출\n    }\n  };\n\n  return (\n    <div className=\"row\">\n      <h2 className=\"row_head\">{title}</h2>\n\n      <div className=\"row__posters\">\n        {movies.map((movie) => (\n          <img\n            key={movie.id}\n            onClick={() => handleClick(movie)}\n            className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\n            src={`${base_url}${\n              isLargeRow ? movie.poster_path : movie.backdrop_path\n            }`}\n            alt={movie.name}\n          />\n        ))}\n      </div>\n      {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\n    </div>\n  );\n}\n\nexport default Row;\n","const API_KEY = \"cc5ebfdf2e98f02716c230f84e90b844\";\n\nconst requests = {\n  fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\n  fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\n  fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\n  fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\n  fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\n  fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\n  fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\n  fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\n};\n\nexport default requests;\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"./axios\";\nimport requests from \"./requests\";\nimport \"./Banner.css\";\n\nfunction Banner() {\n  const [movie, setMovie] = useState([]); //새로고침 할때마다 NetflixOriginals 랜덤 콘텐츠 추천\n\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(requests.fetchNetflixOriginals);\n      setMovie(\n        request.data.results[\n          Math.floor(Math.random() * request.data.results.length - 1)\n        ]\n      );\n      //[movie 1, movie2 ,movie3 ,,,] 중에 random으로 하나 뽑기\n      // -1 은 아마 array개수 안 넘어가게 하려고?\n\n      return request;\n    }\n    fetchData();\n  }, []);\n\n  console.log(movie);\n\n  function truncate(str, n) {\n    return str?.length > n ? str.substr(0, n - 1) + \"...\" : str;\n  }\n  //description이 길어졌을 때 말줄임표(...) 생성\n\n  /*\n    header를 따로 banner로 설정한 이유는 banner의 이미지와 banner의 콘텐츠(내용)에 \n    다른 효과를 주기 위함. (서로 영향을 끼치지 않게 하기 위해) \n    */\n  return (\n    <header\n      className=\"banner\"\n      style={{\n        backgroundSize: \"cover\",\n        backgroundImage: `url(\n                \"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\"\n                )`,\n        backgroundPosition: \"center center\",\n      }}\n    >\n      <div className=\"banner__contents\">\n        <h1 className=\"banner__title\">\n          {movie?.title || movie?.name || movie?.original_name}\n        </h1>\n\n        <div className=\"banner__buttons\">\n          <button className=\"banner__button\">Play</button>\n          <button className=\"banner__button\">My List</button>\n        </div>\n\n        <h1 className=\"banner__description\">\n          {truncate(movie?.overview, 150)}\n          {/* 위에서 설정한 truncate 함수 사용 */}\n        </h1>\n      </div>\n\n      <div className=\"banner--fadeBottom\" />\n    </header>\n  );\n}\n\nexport default Banner;\n","import React, { useEffect, handleShow, useState } from \"react\";\nimport \"./Nav.css\";\n\nfunction Nav() {\n  const [show, handleShow] = useState(false);\n\n  // 스크롤 감지\n  useEffect(() => {\n    window.addEventListener(\"scroll\", () => {\n      if (window.scrollY > 100) {\n        console.log(\"HANDLE SHOW ===== TRUE\");\n        handleShow(true);\n      } else {\n        console.log(\"HANDLE SHOW ===== FALSE\");\n        handleShow(false);\n      }\n    });\n    return () => {\n      var clickfn = function () {};\n      window.removeEventListener(\"scroll\", clickfn);\n    };\n  }, []);\n\n  return (\n    <div className={`nav ${show && \"nav__black\"}`}>\n      <img\n        className=\"nav__logo\"\n        //src=\"https://upload.wikimedia.org/wikipedia/commons/0/0f/Logo_Netflix.png\"\n        src=\"https://upload.wikimedia.org/wikipedia/commons/7/7a/Logonetflix.png\"\n        alt=\"Netflix Logo\"\n      />\n      <img\n        className=\"nav__avatar\"\n        //src=\"https://pbs.twimg.com/profile_images/1240119990411550720/hBEe3tdn_400x400.png\"\n        src=\"https://avatars.githubusercontent.com/u/29592260?v=4\"\n        alt=\"Netflix Logo\"\n      />\n    </div>\n  );\n}\n\nexport default Nav;\n","import React from \"react\";\nimport \"./App.css\";\nimport Row from \"./Row\";\nimport requests from \"./requests\";\nimport Banner from \"./Banner\";\nimport Nav from \"./Nav\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Nav />\n      <Banner />\n      <Row\n        title=\"NETFLIX ORIGINALS\"\n        fetchUrl={requests.fetchNetflixOriginals}\n        isLargeRow={true}\n      />\n      <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending} />\n      <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated} />\n      <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies} />\n      <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies} />\n      <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies} />\n      <Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies} />\n      <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}